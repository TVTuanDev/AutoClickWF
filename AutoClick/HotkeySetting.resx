<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        1P+9xcj/dXFo/8TLzv/P2Nv/sbq9/zw9Pt8AAABoAAAAYAAAAFoAAAA2AAAABQAAABQRERLzKSsr/yss
        Lf8pKir/Kisr/y0uMP8vMjT/MTQ0/zI0NP8yNTb/NDY5/zM1OP8yNTb/MjU1/zAyNf8wMTT/MDE0/zAw
        M/9OUVP/m6Kl/5qipP+Hg3r/sLm8/4+WmP9IS0v/MTI1/zAxNf8uLzD/LC4u/w0ODuEAAAAMAAAAKico
        Kv89QUL/QUVH/0dKTP9HS07/RkpM/0ZKS/9CRkn/QkdJ/0VJSv9GSk3/SE1O/0dMTv9JTE//SUxP/0ZJ
        TP9ERkj/QkVH/0JFSP88QEH/TE9Q/0pNTf9ITEz/RUhJ/1dbXP9BRUf/QUVH/0BDRf8+QUL/HyEi+AAA
        AAkAAAALGxwd+0lMT/9FSUv/YmRm/0NHR/9maWv/S09Q/1xgYv89QEL/RUlL/0VJS/9FSEr/RUhK/0RJ
        Sf9FSkr/RklL/0ZJS/9FSUv/RUlL/z1BQv9TVVf/cnd4/0NFRv9xdXf/bnJz/z9CQ/9SVVb/RUhJ/0ZJ
        Sv8kJibgAAAAAQAAAAAiJCbkWV5h/2Blaf9XXF7/UVZY/3B1d/9UWFv/Zmtv/1BUV/9kam7/ZWpu/2Zq
        cP9kaW3/Y2hr/2Noav9jaGv/Y2lr/2NpbP9jaWz/V1pe/3V5ff92e37/gYaJ/2FlZ/9XXF7/VVlc/2No
        av9JTlH/SExP/xISEqUAAAAAAAAAACUmJrFUWVr/eHx+/2Jnav9gZWj/Vlpc/2VqbP9WXF3/YGVn/1db
        Xv9obXD/V1te/2Npa/9ZXWD/ZGls/1ZbXf9kaWv/WV5g/1xgY/9bYGT/YWZq/1pfYf9bYmT/ZWpt/1pe
        Yf9kaWv/a3By/32Cg/9LT1H/AAAAcgAAAAAAAAAADxERdk5TVf9jZ2r/Y2Zq/2Nmav9WWlz/cXZ4/1dc
        Xv9xdnn/U1lb/2lvcf9XW1//dXp7/2FlZ/9scXT/V1xe/2txdP9cYWP/Y2lr/2Zsbv9bYGL/Zmtu/2Fn
        af93fH7/WF5f/2Nqa/9kam3/aW1y/zxAQf8AAAA+AAAAAAAAAAAAAABCPUFC/2ltb/9lamz/XmFj/1pf
        Yf9WWlz/WV9h/1phY/9aX2H/Ulha/1xjZP9TWVv/W2Fk/1NZW/9TWFv/X2Zo/1ZbXf9cYmT/VFhc/19l
        Z/9WW13/XGFk/1NYW/9gZWj/VVlc/2lucf9tdHX/Jigp+gAAAA8AAAAAAAAAAAAAABAmKCn8VFlb/1le
        YP9SVln/Y2hq/1hdX/9XXV7/Y2lr/11hY/9VWVz/Zmxu/09UV/9jaGr/VVpc/1leYP9XXV//VVtd/2lu
        cP9OU1b/X2Zo/01SVP9ZXmL/S1BT/1ZbXf9KT1H/XGFj/1hcXf8iIyPWAAAAAAAAAAAAAAAAAAAAABsb
        HeRaXmD/ZWpt/0xRVP9wdXf/WF1g/2FmaP9bYWP/Vlpd/2NpbP9MUlX/WWFh/0xQUv9fZmj/UFNW/1ld
        X/9SVlj/T1RW/2Noav9RVVj/aW5x/1NWWf9dY2b/UFNX/11iZf9WWl3/S1BR/x4gIKUAAAAAAAAAAAAA
        AAAAAAAAHB0fszw/QP9MUVL/S09R/1BUVv9SVln/TVJV/01SVf9NUlT/UlhZ/01TVf9TWFr/UFVX/1JV
        V/9IS03/UlVX/0pPUf9SV1n/TVJU/1JWWP9TWFr/SE1P/0xRVP9NUlT/TlRW/1tgYv9BRUb/DAwMeQAA
        AAAAAAAAAAAAAAAAAAASEhJ5Nzo7/0VISf9AREb/PUFC/0lNTv9CRUf/TVJT/0tOUf89QkP/TVFS/z5C
        RP9HS03/QURG/zs/Qf9BREX/ODs8/0NHSP83Ojz/QUVG/zg7Pf9AREX/QERG/0JGSP86P0D/PUBC/zQ4
        Of8AAABFAAAAAAAAAAAAAAAAAAAAAAAAAE40Nzn/Oj0+/zs/QP84OTr/Oz9A/zY6O/80Nzn/Nzo8/zc6
        PP8xMzP/LzAy/y8xMv80Njf/MDM0/ystLv8pLCz/KSss/ywuMP8vMTP/MzY3/zM1Nv8yNjf/MzU2/zM2
        OP80Nzr/Jyoq/QAAABUAAAAAAAAAAAAAAAAAAAAAAAAAEzIzNf1SV1n/Oj0//01RU/9HS0z/RkpM/0dL
        Tf8+QkT/QENF/0JHR/9DSEn/RElK/0NHSf8tMDH/RUlK/0BERv9CRUf/REhJ/0RHSP8vMTL/LzAy/0RH
        Sf9ESUr/REdJ/0NHSP8bGx3TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDiwkJCZ4HBwehCQkJoQkJ
        CaEJCQmhBgcHoQYHB6EGBwehBgYHoQYGB6EGBgehBAQEoQQEBKEEBAShBgYGnwYHB6EEBAShBAQEoQQE
        BKEEBAShBAQEoQYGBqEGBgehBAQGoQAAAFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///wP///wB///4AP//+AD///gA///wAH//8AB///AAf//wAH//+AD///
        gA+AAAADAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABgAAAAYAAAAGAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAfgAAAH//////////////////////////8=
</value>
  </data>
</root>